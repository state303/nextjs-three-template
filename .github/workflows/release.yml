name: Release to Production
concurrency: release-to-prod-pipeline
on:
    push:
        branches:
            - main

jobs:
    create-release:
        permissions:
            contents: write # to be able to publish a GitHub release
            issues: write # to be able to comment on released issues
            pull-requests: write # to be able to comment on released pull requests
        runs-on: ubuntu-24.04
        name: Create Release
        outputs:
            released: ${{ env.RELEASED }}
            newVersion: ${{ env.NEW_VERSION }}
        steps:
            - uses: actions/checkout@v3
              name: Checkout code
              id: checkout
              with:
                  # This is needed for semantic-release to work
                  fetch-depth: 0
            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9
            - name: Setup node
              uses: actions/setup-node@v4
            - name:
                  Install Package Dependencies
                  # needed for both commitlint and semantic-release to work
              run: pnpm i

            - name: Lint commits on main since last version tag
              run: |

                  # Find latest version tag 
                  # Starts with 'v' followed by a digit.
                  # Prevent non-zero exit code from git describe
                  # if a version tag is not found by appending an
                  # `|| echo "..."` to the git describe statement.
                  lasttag=$(git describe --tags --abbrev=0 --match="v[0-9]*" 2>/dev/null) \
                    || echo "no version tag found, will only lint commit message of HEAD commit"


                  # Compute arguments to commitlint
                  if [ "$lasttag" == "" ]; then

                  # A version tag was not found (i.e. semantic-release has yet
                  # to run successfully for the first time on current branch).
                  # So only parse the last/latest commit.
                    clargs="--last"

                  else

                  # latest version tag (that was found) should be mapped to
                  # SHA of the commit bearing the tag. This should be --from
                  # argument to commitlint (this is excluded when commitlint
                  # run) and HEAD should be the --to argument (this would
                  # be included when commitlint runs)
                    echo "latest version tag is $lasttag, will lint messages of all commits forward of this up to HEAD..."
                    clargs="--from=$(git rev-parse $lasttag) --to=HEAD"

                  fi

                  # Run commitlint with computed arguments
                  pnpm -- commitlint --verbose $clargs
            - name: Create GitHub release
              id: semanticrelease
              env:
                  GH_TOKEN: ${{ secrets.GH_TOKEN }}
              run: |
                  echo "RELEASED=0" >> $GITHUB_ENV
                  pnpm audit signatures
                  pnpm run husky
    deploy:
        name: Deploy to Vercel
        runs-on: ubuntu-24.04
        env:
            VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
            VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        needs: create-release
        if: ${{ needs.create-release.outputs.released == 1}}
        steps:
            - name: Print version to console
              run: |
                  echo "New Version Number is: ${{ needs.create-release.outputs.newVersion }}"
            - uses: actions/checkout@v2
            - name: Update Version Number in package.json
              run: npm --no-git-tag-version version ${{ needs.create-release.outputs.newVersion }}
            - name: Install Vercel CLI
              run: npm install --global vercel@latest
            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
            - name: Build Project Artifacts
              run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
            - name: Deploy Project Artifacts to Vercel
              run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
